################################################################################
# GLOBAL                                                                       #
################################################################################

x-global-service: &global--service
  stop_grace_period: 10s
  restart: unless-stopped
  healthcheck: &global--healthcheck
    interval: 5s
    timeout: 3s
    retries: 3
    start_period: 30s
  environment: &global-env
    TZ: &global-env--timezone ${TZ:?}

x-global-hosts: &global--hosts
  GLOBAL_FAIL2BAN_HOST: &global--fail2ban-host fail2ban

x-global-volumes: &global--volumes
  &global--fail2ban-config fail2ban_config:
    name: *global--fail2ban-config
    external: true

x-global-services: &global--services
  *global--fail2ban-host:
    << : *global--service
    container_name: *global--fail2ban-host
    image: lscr.io/linuxserver/fail2ban:1.0.2-r3-ls63
    cap_add:
      - NET_ADMIN
      - NET_RAW
    network_mode: host
    healthcheck:
      << : *global--healthcheck
      test: [ "CMD-SHELL", "fail2ban-client ping" ]
    environment:
      << : *global-env
      PUID: 1000
      PGID: 1000
      TELEGRAM_API_KEY: ${FAIL2BAN_TELEGRAM_API_KEY:?}
      TELEGRAM_CHAT_ID: ${FAIL2BAN_TELEGRAM_CHAT_ID:?}
      SERVER: ${COMPOSE_PROJECT_NAME:?}
    volumes:
      - type: bind
        source: /var/log
        target: /var/log
        read_only: true
      - type: bind
        source: /var/log/fail2ban
        target: /config/log/fail2ban
      - type: volume
        source: *global--fail2ban-config
        target: /config
      - type: bind
        source: ./fail2ban/jail.local
        target: /config/fail2ban/jail.local
        read_only: true
      - type: bind
        source: ./fail2ban/fail2ban.local
        target: /config/fail2ban/fail2ban.local
        read_only: true
      - type: bind
        source: ./fail2ban/scripts
        target: /config/fail2ban/scripts
        read_only: true
      - type: bind
        source: ./fail2ban/jail.d/
        target: /config/fail2ban/jail.d/
      - type: bind
        source: ./fail2ban/filter.d/
        target: /config/fail2ban/filter.d/
      - type: bind
        source: ./fail2ban/action.d/
        target: /config/fail2ban/action.d/
      - type: bind
        source: /var/log/vaultwarden
        target: /remotelogs/vaultwarden
        read_only: true

###############################################################################
# VAULTWARDEN                                                                 #
###############################################################################

x-vaultwarden-hosts: &vaultwarden--hosts
  VAULTWARDEN_SERVER_HOST: &vaultwarden--server-host vaultwarden-server
  # WARNING: Need to change VAULTWARDEN_POSTGRES_HOST in .env too
  VAULTWARDEN_POSTGRES_HOST: &vaultwarden--postgres-host vaultwarden-postgres

x-vaultwarden-networks: &vaultwarden--networks
  &vaultwarden--proxy-network vaultwarden-proxy:
    name: *vaultwarden--proxy-network
  &vaultwarden--network vaultwarden:
    name: *vaultwarden--network

x-vaultwarden-volumes: &vaultwarden--volumes
  &vaultwarden--server-data vaultwarden-server_data:
    name: *vaultwarden--server-data
    external: true
  &vaultwarden--postgres-data vaultwarden-postgres_data:
    name: *vaultwarden--postgres-data
    external: true


x-vaultwarden-service: &vaultwarden--service
  << : *global--service
  environment: &vaultwarden-env
    << :
      - *global-env
      - *vaultwarden--hosts
  networks:
    - *vaultwarden--network

x-vaultwarden--services: &vaultwarden--services
  *vaultwarden--postgres-host:
    << : *vaultwarden--service
    container_name: *vaultwarden--postgres-host
    image: postgres:15
    volumes:
      - type: volume
        source: *vaultwarden--postgres-data
        target: /var/lib/postgresql/data
    healthcheck:
      << : *global--healthcheck
      test: [ "CMD-SHELL", "pg_isready -U ${VAULTWARDEN_POSTGRES_USER:?} -d ${VAULTWARDEN_POSTGRES_DB:?}" ]
    environment:
      << : *vaultwarden-env
      POSTGRES_PASSWORD: ${VAULTWARDEN_POSTGRES_PASSWORD:?}
      POSTGRES_USER: ${VAULTWARDEN_POSTGRES_USER:?}
      POSTGRES_DB: ${VAULTWARDEN_POSTGRES_DB:?}
      POSTGRES_INITDB_ARGS: --auth-host=scram-sha-256
  *vaultwarden--server-host:
    << : *vaultwarden--service
    container_name: *vaultwarden--server-host
    depends_on:
      *vaultwarden--postgres-host:
        condition: service_healthy
    image: vaultwarden/server
    volumes:
      - type: volume
        source: *vaultwarden--server-data
        target: /data
      - type: bind
        source: /var/log/vaultwarden
        target: /var/log/vaultwarden
    networks:
      - *vaultwarden--network
      - *vaultwarden--proxy-network
    environment:
      << : *vaultwarden-env
      DOMAIN: https://${VAULTWARDEN_SERVER_DOMAIN:?}
      SIGNUPS_ALLOWED: 'false'
      SIGNUPS_VERIFY: 'true'
      TRASH_AUTO_DELETE_DAYS: 7
      ADMIN_TOKEN: ${VAULTWARDEN_SERVER_ADMIN_TOKEN:?}
      PUSH_ENABLED: 'true'
      PUSH_INSTALLATION_ID: ${VAULTWARDEN_SERVER_PUSH_INSTALLATION_ID:?}
      PUSH_INSTALLATION_KEY: ${VAULTWARDEN_SERVER_PUSH_INSTALLATION_KEY:?}
      LOG_FILE: /var/log/vaultwarden/vaultwarden.log
      SMTP_HOST: ${SMTP_HOST:?}
      SMTP_FROM: ${SMTP_USERNAME:?}
      SMTP_PORT: ${SMTP_PORT:?}
      SMTP_SECURITY: ${SMTP_SECURITY:?}
      SMTP_USERNAME: ${SMTP_USERNAME:?}
      SMTP_PASSWORD: ${SMTP_PASSWORD:?}
      SHOW_PASSWORD_HINT: 'false'
      EXTENDED_LOGGIN: 'true'
      DATABASE_URL: ${VAULTWARDEN_SERVER_DATABASE_URL:?}
      YUBICO_CLIENT_ID: ${VAULTWARDEN_SERVER_YUBICO_CLIENT_ID:?}
      YUBICO_SECRET_KEY: ${VAULTWARDEN_SERVER_YUBICO_SECRET_KEY:?}

###############################################################################
# DNS                                                                         #
###############################################################################

x-dns-hosts: &dns--hosts
  DNS_PIHOLE_HOST: &dns--pihole-host pihole
  DNS_CLOUDFLARE_DDNS_HOST: &dns--cloudflare-ddns-host cloudflare-ddns

x-dns-volumes: &dns--volumes
  &dns--pihole-dnsmasqd-volume pihole_dnsmasq.d:
    name: *dns--pihole-dnsmasqd-volume
    external: true
  &dns--pihole-volume pihole:
    name: *dns--pihole-volume
    external: true

x-dns-networks: &dns--networks
  &dns--pihole-network pihole:
    name: *dns--pihole-network

x-dns-services: &dns--services
  *dns--pihole-host:
    << : *global--service
    image: jacklul/pihole
    container_name: *dns--pihole-host
    environment:
      << : *global-env
      WEBPASSWORD: ${DNS_PIHOLE_WEBPASSWORD:?}
      PIHOLE_DNS_: 10.10.20.1
      PIHOLE_DOMAIN: ${DNS_PIHOLE_DOMAIN:?}
      PHUL_LOG_FILE: /var/log/pihole-updatelists/pihole-updatelists.log
      FTLCONF_RATE_LIMIT: 0/0
      FTLCONF_IGNORE_LOCALHOST: yes
      FTLCONF_BLOCK_ICLOUD_PR: "false"
      FTLCONF_PRIVACYLEVEL: 0
      FTLCONF_LOCAL_IPV4: 10.10.20.20
    ports: 
      - 53:53/tcp
      - 53:53/udp
    volumes:
      - type: volume
        source: *dns--pihole-volume
        target: /etc/pihole
      - type: volume
        source: *dns--pihole-dnsmasqd-volume
        target: /etc/dnsmasq.d
      - type: bind
        source: ./pihole/custom.list
        target: /etc/pihole/custom.list
        read_only: true
      - type: bind
        source: ./pihole/pihole-updatelists
        target: /etc/pihole-updatelists
      - type: bind
        source: /var/log/pihole-updatelists
        target: /var/log/pihole-updatelists
      - type: bind
        source: /var/log/pihole
        target: /var/log/pihole
    networks:
      - *dns--pihole-network
  *dns--cloudflare-ddns-host:
    << : *global--service
    image: timothyjmiller/cloudflare-ddns
    container_name: *dns--cloudflare-ddns-host
    security_opt:
      - no-new-privileges:true
    environment:
      << : *global-env
      PUID: 1000
      PGID: 1000
    volumes:
      - type: bind
        source: ./cloudflare-ddns/config.json
        target: /config.json
    network_mode: host

###############################################################################
# HOME ASSISTANT                                                              #
###############################################################################

x-home-assistant-hosts: &home-assistant--hosts
  HOME_ASSISTANT_HOST: &home-assistant--host home-assistant

x-home-assistant-networks: &home-assistant--networks
  &home-assistant--network home-assistant:
    name: *home-assistant--network
    external: true

x-home-assistant-services: &home-assistant--services
  *home-assistant--host:
    << : *global--service
    image: ghcr.io/home-assistant/home-assistant:stable
    container_name: *home-assistant--host
    volumes:
      - type: bind
        source: ./home-assistant
        target: /config
      - type: bind
        source: /etc/localtime
        target: /etc/localtime
        read_only: true
      - type: bind
        source: /run/dbus
        target: /run/dbus
        read_only: true
    network_mode: host
    privileged: true
    healthcheck:
      << : *global--healthcheck
      test: [ "CMD-SHELL", "wget --tries=1 --spider http://127.0.0.1:8123/manifest.json" ]

###############################################################################
# REVERSE PROXY                                                               #
###############################################################################

x-reverse-proxy-hosts: &reverse-proxy--hosts
  CADDY_HOST: &reverse-proxy--caddy-host caddy

x-reverse-proxy-volumes: &reverse-proxy--volumes
  &reverse-proxy--caddy-data-volume caddy_data:
    name: *reverse-proxy--caddy-data-volume
    external: true
  &reverse-proxy--caddy-config-volume caddy_config:
    name: *reverse-proxy--caddy-config-volume
    external: true

x-reverse-proxy-networks: &reverse-proxy--networks
  &reverse-proxy--caddy-network caddy:
    name: *reverse-proxy--caddy-network
    ipam:
      config:
        - subnet: 172.28.0.0/16
          gateway: 172.28.0.1
          aux_addresses:
            # WARNING! This IP is static in the home-assistant trusted proxy configuration 
            # and in the iptables rules
            *reverse-proxy--caddy-host: &reverse-proxy--caddy-ip 172.28.0.20

x-reverse-proxy-services: &reverse-proxy--services
  *reverse-proxy--caddy-host:
    << : *global--service
    image: slothcroissant/caddy-cloudflaredns
    container_name: *reverse-proxy--caddy-host
    depends_on:
      *vaultwarden--server-host:
        condition: service_healthy
      *dns--pihole-host:
        condition: service_healthy
      *home-assistant--host:
        condition: service_healthy
      
    healthcheck:
      << : *global--healthcheck
      test: [ "CMD-SHELL", "wget --tries=1 --spider http://127.0.0.1:2019/reverse_proxy/upstreams" ]
    volumes:
      - type: bind
        source: ./caddy
        target: /etc/caddy
      - type: volume
        source: *reverse-proxy--caddy-data-volume
        target: /data
      - type: volume
        source: *reverse-proxy--caddy-config-volume
        target: /config
      - type: bind
        source: /var/log/caddy
        target: /var/log/caddy
    extra_hosts:
      # necessary, to talk to the home-assistant container (due to network_mode: host)
      - "host.docker.internal:host-gateway"
    environment:
      << :
        - *global-env
        - *vaultwarden--hosts
        - *dns--hosts
      CLOUDFLARE_API_TOKEN: ${CLOUDFLARE_API_TOKEN:?}
      VAULTWARDEN_SERVER_DOMAIN: ${VAULTWARDEN_SERVER_DOMAIN:?}
      DNS_PIHOLE_DOMAIN: ${DNS_PIHOLE_DOMAIN:?}
      HOME_ASSISTANT_DOMAIN: ${HOME_ASSISTANT_DOMAIN:?}
      HOME_ASSISTANT_HOST: host.docker.internal
      TLS_EMAIL: ${TLS_EMAIL:?}
    ports:
      - 80:80/tcp
      - 443:443/tcp
      - 443:443/udp
    networks:
      *vaultwarden--proxy-network:
      *dns--pihole-network:
      *reverse-proxy--caddy-network:
          ipv4_address: *reverse-proxy--caddy-ip

###############################################################################
# COMPOSE DEFINITIONS                                                         #
###############################################################################

services:
  << :
    - *global--services 
    - *reverse-proxy--services
    - *vaultwarden--services
    - *dns--services
    - *home-assistant--services

volumes:
  << :
    - *global--volumes
    - *reverse-proxy--volumes
    - *vaultwarden--volumes
    - *dns--volumes

networks:
  << :
    - *reverse-proxy--networks
    - *vaultwarden--networks
    - *dns--networks
